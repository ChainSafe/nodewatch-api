# Copyright 2020 ChainSafe Systems
# SPDX-License-Identifier: LGPL-3.0-only

name: Build & Deploy PROD

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
    secrets:
      aws_region:
        required: true
      aws_account_id:
        required: true
      ecr_repo:
        required: true
      ecs_cluster:
        required: true
      ecs_service:
        required: true

env:
  ENVIRONMENT: PROD
  
jobs:
  build:
    name: build_deploy_prod
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      # download the source code into the runner
      - name: checkout
        uses: actions/checkout@v2
      
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.aws_account_id }}:role/github-actions-role
          aws-region: ${{ secrets.aws_region }}
          role-session-name: GithubActions

      # gather metadata from git & github actions to reference in docker
      - name: git & github metadata
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.aws_account_id }}.dkr.ecr.${{ secrets.aws_region }}.amazonaws.com/${{ secrets.ecr_repo }}

      # login in docker repository
      - name: docker login
        uses: aws-actions/amazon-ecr-login@v1

      # build a docker image
      - name: docker & push image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.aws_account_id }}.dkr.ecr.${{ secrets.aws_region }}.amazonaws.com/${{ secrets.ecr_repo }}:latest
            ${{ secrets.aws_account_id }}.dkr.ecr.${{ secrets.aws_region }}.amazonaws.com/${{ secrets.ecr_repo }}:${{ steps.vars.outputs.tag }}
        
      # deploy to AWS ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: infra/aws-ecs/task_definition_${{ env.ENVIRONMENT }}.json
          service: ${{ secrets.ecs_service }}
          cluster: ${{ secrets.ecs_cluster }}
          wait-for-service-stability: true
